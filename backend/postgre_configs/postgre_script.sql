-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.address
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    fk_customer_id integer NOT NULL,
    namesurname character varying(100) COLLATE pg_catalog."default" NOT NULL,
    fk_city_id integer NOT NULL,
    fk_town_id integer NOT NULL,
    postal_code character varying(5) COLLATE pg_catalog."default" NOT NULL,
    address_line text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_address PRIMARY KEY (id)
    );

CREATE TABLE IF NOT EXISTS public.bank_information
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    fk_customer_id integer NOT NULL,
    nickname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    iban character varying(26) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_bank_information PRIMARY KEY (id),
    CONSTRAINT unq_bank_information_iban UNIQUE (iban)
    );

CREATE TABLE IF NOT EXISTS public.city
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_city PRIMARY KEY (id),
    CONSTRAINT unq_city_name UNIQUE (name)
    );

CREATE TABLE IF NOT EXISTS public.contact_message
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    surname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    subject character varying(100) COLLATE pg_catalog."default" NOT NULL,
    message text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_contact_message PRIMARY KEY (id)
    );

CREATE TABLE IF NOT EXISTS public.customer
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    surname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    phone_number character varying(10) COLLATE pg_catalog."default" NOT NULL,
    balance integer DEFAULT 0,
    email_validation boolean DEFAULT false,
    phone_validation boolean DEFAULT false,
    date_created time with time zone DEFAULT now(),
    CONSTRAINT pk_customer PRIMARY KEY (id),
    CONSTRAINT unq_customer_email UNIQUE (email),
    CONSTRAINT unq_customer_phone_number UNIQUE (phone_number)
    DEFERRABLE
    );

CREATE TABLE IF NOT EXISTS public.employee
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    surname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    phone_number character varying(10) COLLATE pg_catalog."default" NOT NULL,
    expertise character varying(200) COLLATE pg_catalog."default",
    fee integer DEFAULT 0,
    expertise_fee integer DEFAULT 0,
    available boolean DEFAULT false,
    description text COLLATE pg_catalog."default" DEFAULT ' '::text,
    email_validation boolean DEFAULT false,
    phone_validation boolean DEFAULT false,
    date_created time with time zone DEFAULT now(),
    fk_city_id integer NOT NULL,
    fk_town_id integer NOT NULL,
    CONSTRAINT pk_employee PRIMARY KEY (id),
    CONSTRAINT unq_employee_email UNIQUE (email),
    CONSTRAINT unq_employee_phone_number UNIQUE (phone_number)
    );

CREATE TABLE IF NOT EXISTS public.payment_method
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    fk_customer_id integer NOT NULL,
    name_on_card character varying(100) COLLATE pg_catalog."default" NOT NULL,
    card_number character varying(16) COLLATE pg_catalog."default" NOT NULL,
    expiry_date date NOT NULL,
    cvc character varying(3) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_payment_method PRIMARY KEY (id),
    CONSTRAINT unq_payment_method_card_number UNIQUE (card_number)
    );

CREATE TABLE IF NOT EXISTS public.requirement
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    fk_transaction_id integer NOT NULL,
    requirement character varying(200) COLLATE pg_catalog."default" NOT NULL,
    satisfied boolean DEFAULT false,
    CONSTRAINT pk_requirement PRIMARY KEY (id)
    );

CREATE TABLE IF NOT EXISTS public.status
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_status PRIMARY KEY (id),
    CONSTRAINT unq_status_name UNIQUE (name)
    );

CREATE TABLE IF NOT EXISTS public.system_personnel
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(100) COLLATE pg_catalog."default" NOT NULL,
    identity_number character varying(11) COLLATE pg_catalog."default" NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    surname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_system_personnel PRIMARY KEY (id),
    CONSTRAINT unq_system_personnel_email UNIQUE (email),
    CONSTRAINT unq_system_personnel_identity_number UNIQUE (password)
    );

CREATE TABLE IF NOT EXISTS public.town
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    fk_city_id integer NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pk_town PRIMARY KEY (id)
    );

CREATE TABLE IF NOT EXISTS public.transaction
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    fk_employee_id integer NOT NULL,
    fk_buyer_id integer NOT NULL,
    fk_seller_id integer NOT NULL,
    item_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    item_price integer NOT NULL,
    employee_fee integer NOT NULL,
    details text COLLATE pg_catalog."default" DEFAULT ''::text,
    fk_status_id integer DEFAULT 1,
    date_created time with time zone DEFAULT now(),
    CONSTRAINT pk_transaction PRIMARY KEY (id)
    );

ALTER TABLE IF EXISTS public.address
    ADD CONSTRAINT fk_address_city_id FOREIGN KEY (fk_city_id)
    REFERENCES public.city (id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.address
    ADD CONSTRAINT fk_address_customer_id FOREIGN KEY (fk_customer_id)
    REFERENCES public.customer (id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.address
    ADD CONSTRAINT fk_address_town_id FOREIGN KEY (fk_town_id)
    REFERENCES public.town (id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.bank_information
    ADD CONSTRAINT fk_bank_information_customer_id FOREIGN KEY (fk_customer_id)
    REFERENCES public.customer (id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.employee
    ADD CONSTRAINT fk_employee_city FOREIGN KEY (fk_city_id)
    REFERENCES public.city (id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.employee
    ADD CONSTRAINT fk_employee_town FOREIGN KEY (fk_town_id)
    REFERENCES public.town (id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.payment_method
    ADD CONSTRAINT fk_payment_method_customer FOREIGN KEY (fk_customer_id)
    REFERENCES public.customer (id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.requirement
    ADD CONSTRAINT fk_requirement_transaction FOREIGN KEY (fk_transaction_id)
    REFERENCES public.transaction (id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.town
    ADD CONSTRAINT fk_town_city FOREIGN KEY (fk_city_id)
    REFERENCES public.city (id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.transaction
    ADD CONSTRAINT fk_transaction_buyer_id FOREIGN KEY (fk_buyer_id)
    REFERENCES public.customer (id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.transaction
    ADD CONSTRAINT fk_transaction_employee_id FOREIGN KEY (fk_employee_id)
    REFERENCES public.employee (id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.transaction
    ADD CONSTRAINT fk_transaction_seller_id FOREIGN KEY (fk_seller_id)
    REFERENCES public.customer (id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.transaction
    ADD CONSTRAINT fk_transaction_status_id FOREIGN KEY (fk_status_id)
    REFERENCES public.status (id) MATCH SIMPLE
    ON UPDATE CASCADE
       ON DELETE CASCADE;

END;